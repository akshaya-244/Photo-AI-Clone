// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  username String 
  profilePicture String?
  email String @default("")
  hasAccess Boolean?
  priceId String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  credits String @default("0.0")
}


model Models{
  id String @id @default(uuid())
  name String
  type ModelTypeEnum
  age Int
  ethnicity ethnicityEnum
  eyeColor eyeColorEnum
  bald Boolean
  userId String?
  thumbnail String?
  tensorPath String?
  triggerWord String?
  trainingStatus OutputImageStatusEnum  @default(Pending)
  falAiRequestId String?
  generatedImages GeneratedImages[]
  // generatedImages GenerateImage[] we shouldnt have array of image urls just like this there should be another table
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zipUrl String
  open Boolean @default(false)
}




model GeneratedImages{
  id String @id @default(uuid())
  modelId String
  imageURL String @default("")
  userId String
  prompt String
  falAiRequestId String
  status OutputImageStatusEnum @default(Pending)
  model Models @relation(fields: [modelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zipUrl String?

}

model Pack {
  id String @id @default(uuid())
  description String @default("")
  imageUrl1 String @default("")
  imageUrl2 String @default("")
  name String
  prompts PackPrompt[]
}

model PackPrompt{
  id String @id @default(uuid())
  prompt String
  packId String
  pack Pack @relation(fields: [packId], references: [id])
}

enum OutputImageStatusEnum{
  Pending 
  Generated
  Failed
}

enum ModelTypeEnum{
  man
  woman
  other
}
enum ethnicityEnum{
  white
  black 
  asian_american 
  south_east_asian
  east_asian 
  south_asian 
  middle_eastern 
  pacific
  hispanic
}

enum eyeColorEnum{
  brown
  blue
  hazel
  gray
  black
}